<<<<<<< HEAD
Resumo do artigo transactional:
Por curiosidade eu já tinha visto um pouco sobre Transactional no primeiro curso de java, pois fui ver algumas aulas de JPA a parte e também já tinha visto a annotation @Transactional nos meus estudos pessoais de Spring Boot, mas não entendia muito bem do que se tratava e juntando tudo isso com o artigo que foi lido, tornou bem claro do que realmente se trata essa annotation. O @Transactional só precisa ser utilizado obrigatoriamente quando usamos o EntityManager para fazer as ações. Quando é usado o JpaRepository, não precisa ser explícita nos métodos, salvo algumas situações como por exemplo: 
1° - Quando em um métodos é preciso salvar 3 objetos diferentes, logicamente utilizando três repositórios. Usando a annotation, mesmo que duas dessas ações sejam executadas corretamente e a outra não, graças ao transactional essas alterações não serão persistidas deste modo lançando um erro. O transactional torna mais seguro fazendo com que salve tudo ou nada.
2° - Em uma aplicação pode ocorrer de termos diversas entidades e essas entidades estarem sendo armazenadas em banco de dados diferentes. O transacional nessa situação acaba se tornando quase que obrigatório, pois vai ser nele que você irá informar o transactionalManager da entidade onde deverá ser feita essa ação, passando o banco de dados onde se encontra essa tabela. 
=======
Resumo do artigo transactional:
Por curiosidade eu já tinha visto um pouco sobre Transactional no primeiro curso de java, pois fui ver algumas aulas de JPA a parte e também já tinha visto a annotation @Transactional nos meus estudos pessoais de Spring Boot, mas não entendia muito bem do que se tratava e juntando tudo isso com o artigo que foi lido, tornou bem claro do que realmente se trata essa annotation. O @Transactional só precisa ser utilizado obrigatoriamente quando usamos o EntityManager para fazer as ações. Quando é usado o JpaRepository, não precisa ser explícita nos métodos, salvo algumas situações como por exemplo: 
1° - Quando em um métodos é preciso salvar 3 objetos diferentes, logicamente utilizando três repositórios. Usando a annotation, mesmo que duas dessas ações sejam executadas corretamente e a outra não, graças ao transactional essas alterações não serão persistidas deste modo lançando um erro. O transactional torna mais seguro fazendo com que salve tudo ou nada.
2° - Em uma aplicação pode ocorrer de termos diversas entidades e essas entidades estarem sendo armazenadas em banco de dados diferentes. O transacional nessa situação acaba se tornando quase que obrigatório, pois vai ser nele que você irá informar o transactionalManager da entidade onde deverá ser feita essa ação, passando o banco de dados onde se encontra essa tabela. 
>>>>>>> 4f413d7a72682f593a67aeff513fea413a7b350f
